from flask import Flask, request, jsonify, send_file
import os
import time
import uuid
import glob
import subprocess
import json
import random
import threading
import re
from werkzeug.utils import secure_filename

app = Flask(__name__)

# ‡¥°‡¥Ø‡¥±‡¥ï‡µç‡¥ü‡¥±‡¥ø‡¥ï‡µæ ‡¥∏‡µÉ‡¥∑‡µç‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
os.makedirs('/app/downloads', exist_ok=True)
os.makedirs('/app/metadata', exist_ok=True)

# ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥Ü‡¥®‡µç‡¥±‡¥ø-‡¥¨‡µç‡¥≤‡µã‡¥ï‡µç‡¥ï‡¥ø‡¥Ç‡¥ó‡µç ‡¥ï‡µã‡µ∫‡¥´‡¥ø‡¥ó‡¥±‡µá‡¥∑‡¥®‡µÅ‡¥ï‡µæ
USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1',
    'Mozilla/5.0 (Android 13; Mobile; rv:109.0) Gecko/109.0 Firefox/109.0',
    'Mozilla/5.0 (iPad; CPU OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
]

# ‡¥µ‡¥ø‡¥ú‡¥Ø ‡¥ü‡µç‡¥∞‡¥æ‡¥ï‡µç‡¥ï‡¥ø‡¥Ç‡¥ó‡µç
success_stats = {'total': 0, 'successful': 0, 'methods': {}}
request_timestamps = []
MAX_REQUESTS_PER_MINUTE = 30

def rate_limit_check():
    """‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥±‡µá‡¥±‡µç‡¥±‡µç ‡¥≤‡¥ø‡¥Æ‡¥ø‡¥±‡µç‡¥±‡¥ø‡¥Ç‡¥ó‡µç"""
    global request_timestamps
    current_time = time.time()
    request_timestamps = [ts for ts in request_timestamps if current_time - ts < 60]
    if len(request_timestamps) >= MAX_REQUESTS_PER_MINUTE:
        return False
    request_timestamps.append(current_time)
    return True

def extract_video_id(url):
    """‡¥µ‡¥ø‡¥µ‡¥ø‡¥ß URL ‡¥´‡µã‡µº‡¥Æ‡¥æ‡¥±‡µç‡¥±‡µÅ‡¥ï‡¥≥‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µç YouTube ‡¥µ‡µÄ‡¥°‡¥ø‡¥Ø‡µã ID ‡¥é‡¥ï‡µç‚Äå‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥ï‡µç‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ"""
    try:
        patterns = [
            r'(?:v=|\/)([0-9A-Za-z_-]{11}).*',
            r'youtu\.be\/([0-9A-Za-z_-]{11})',
            r'embed\/([0-9A-Za-z_-]{11})',
            r'shorts\/([0-9A-Za-z_-]{11})'
        ]
        for pattern in patterns:
            match = re.search(pattern, url)
            if match and len(match.group(1)) == 11:
                return match.group(1)
        return None
    except:
        return None

def auto_cleanup():
    """‡¥∏‡µç‡¥•‡¥ø‡¥§‡¥ø‡¥µ‡¥ø‡¥µ‡¥∞‡¥ï‡µç‡¥ï‡¥£‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡¥≥‡µÅ‡¥≥‡µç‡¥≥ ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥ì‡¥ü‡µç‡¥ü‡µã-‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥™‡µç‡¥™‡µç"""
    while True:
        try:
            time.sleep(1800)  # ‡¥ì‡¥∞‡µã 30 ‡¥Æ‡¥ø‡¥®‡¥ø‡¥±‡µç‡¥±‡¥ø‡¥≤‡µÅ‡¥Ç ‡¥ì‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
            current_time = time.time()
            
            deleted_files = 0
            # 2 ‡¥Æ‡¥£‡¥ø‡¥ï‡µç‡¥ï‡µÇ‡¥±‡¥ø‡µΩ ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥™‡¥¥‡¥ï‡µç‡¥ï‡¥Æ‡µÅ‡¥≥‡µç‡¥≥ ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µÅ‡¥ï‡µæ ‡¥ï‡µç‡¥≤‡µÄ‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
            for file_path in glob.glob('/app/downloads/*'):
                if current_time - os.path.getctime(file_path) > 7200:
                    try:
                        os.remove(file_path)
                        deleted_files += 1
                        # ‡¥Ö‡¥®‡µÅ‡¥¨‡¥®‡µç‡¥ß ‡¥Æ‡µÜ‡¥±‡µç‡¥±‡¥æ‡¥°‡¥æ‡¥±‡µç‡¥± ‡¥®‡µÄ‡¥ï‡µç‡¥ï‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
                        meta_path = f"/app/metadata/{os.path.basename(file_path)}.json"
                        if os.path.exists(meta_path):
                            os.remove(meta_path)
                    except:
                        pass
            
            print(f"üßπ ‡¥ì‡¥ü‡µç‡¥ü‡µã-‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥™‡µç‡¥™‡µç: {deleted_files} ‡¥™‡¥¥‡¥Ø ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥®‡µÄ‡¥ï‡µç‡¥ï‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µÅ")
        except:
            time.sleep(300)

# ‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥™‡µç‡¥™‡µç ‡¥§‡µç‡¥∞‡µÜ‡¥°‡µç ‡¥Ü‡¥∞‡¥Ç‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
cleanup_thread = threading.Thread(target=auto_cleanup)
cleanup_thread.daemon = True
cleanup_thread.start()

def get_video_info_enhanced(url):
    """‡¥Æ‡µæ‡¥ü‡µç‡¥ü‡¥ø‡¥™‡µç‡¥™‡¥ø‡µæ ‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥±‡µç‡¥±‡¥ú‡¥ø‡¥ï‡¥≥‡µÅ‡¥≥‡µç‡¥≥ ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥µ‡µÄ‡¥°‡¥ø‡¥Ø‡µã ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ"""
    try:
        video_id = extract_video_id(url)
        if not video_id:
            return {'success': False, 'error': '‡¥Ö‡¥∏‡¥æ‡¥ß‡µÅ‡¥µ‡¥æ‡¥Ø YouTube URL'}
        
        strategies = [
            ['--impersonate', 'chrome'],
            ['--impersonate', 'firefox'], 
            ['--user-agent', random.choice(USER_AGENTS)],
            []  # ‡¥¨‡µá‡¥∏‡¥ø‡¥ï‡µç ‡¥´‡µã‡µæ‡¥¨‡¥æ‡¥ï‡µç‡¥ï‡µç
        ]
        
        for strategy in strategies:
            try:
                cmd = [
                    'yt-dlp',
                    '--dump-json',
                    '--no-warnings',
                    '--quiet'
                ] + strategy + [url]
                
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    info = json.loads(result.stdout)
                    return {
                        'title': info.get('title', '‡¥ì‡¥°‡¥ø‡¥Ø‡µã')[:100],
                        'duration': info.get('duration', 0),
                        'thumbnail': info.get('thumbnail', f'https://img.youtube.com/vi/{video_id}/hqdefault.jpg'),
                        'uploader': info.get('uploader', '‡¥Ö‡¥ú‡µç‡¥û‡¥æ‡¥§ ‡¥Ü‡µº‡¥ü‡µç‡¥ü‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡µç')[:50],
                        'view_count': info.get('view_count', 0),
                        'upload_date': info.get('upload_date', ''),
                        'video_id': video_id,
                        'success': True
                    }
            except:
                continue
        
        return {'success': False, 'error': '‡¥é‡¥≤‡µç‡¥≤‡¥æ ‡¥µ‡¥ø‡¥µ‡¥∞ ‡¥é‡¥ï‡µç‚Äå‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥ï‡µç‡¥∑‡µª ‡¥∞‡µÄ‡¥§‡¥ø‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ'}
    except:
        return {'success': False, 'error': '‡¥µ‡¥ø‡¥µ‡¥∞ ‡¥é‡¥ï‡µç‚Äå‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥ï‡µç‡¥∑‡µª ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ'}

def smart_download_with_fallbacks(url):
    """‡¥Æ‡µæ‡¥ü‡µç‡¥ü‡¥ø‡¥™‡µç‡¥™‡¥ø‡µæ ‡¥Ü‡¥®‡µç‡¥±‡¥ø-‡¥¨‡µç‡¥≤‡µã‡¥ï‡µç‡¥ï‡¥ø‡¥Ç‡¥ó‡µç ‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥±‡µç‡¥±‡¥ú‡¥ø‡¥ï‡¥≥‡µÅ‡¥≥‡µç‡¥≥ ‡¥Ö‡µæ‡¥ü‡µç‡¥ü‡¥ø‡¥Æ‡µá‡¥±‡µç‡¥±‡µç ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç"""
    global success_stats
    
    strategies = [
        {
            'name': 'chrome_impersonate_hq',
            'cmd_parts': [
                '--impersonate', 'chrome', 
                '--audio-quality', '192K',
                '--throttled-rate', '100K',
                '--sleep-interval', str(random.randint(2, 5))
            ]
        },
        {
            'name': 'firefox_impersonate_mq',
            'cmd_parts': [
                '--impersonate', 'firefox',
                '--audio-quality', '128K',
                '--limit-rate', '500K'
            ]
        },
        {
            'name': 'mobile_agent_lq',
            'cmd_parts': [
                '--user-agent', random.choice([ua for ua in USER_AGENTS if 'Mobile' in ua or 'iPhone' in ua or 'Android' in ua]),
                '--audio-quality', '96K',
                '--format', 'worstaudio',
                '--sleep-interval', '5'
            ]
        },
        {
            'name': 'bypass_age_restriction',
            'cmd_parts': [
                '--age-limit', '18',
                '--audio-quality', '128K',
                '--sleep-interval', '10'
            ]
        },
        {
            'name': 'extreme_fallback',
            'cmd_parts': [
                '--force-ipv4',
                '--audio-quality', '64K',
                '--format', 'worstaudio/worst',
                '--sleep-interval', '15',
                '--retries', '10'
            ]
        }
    ]
    
    for strategy in strategies:
        try:
            file_id = str(uuid.uuid4())[:8]
            output_path = f"/app/downloads/audio_{file_id}.mp3"
            
            base_cmd = [
                'yt-dlp',
                '-x',
                '--audio-format', 'mp3',
                '--no-warnings',
                '--quiet',
                '--socket-timeout', '20',
                '--extractor-retries', '2',
                '--fragment-retries', '2'
            ]
            
            # ‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥±‡µç‡¥±‡¥ú‡¥ø-‡¥∏‡µç‡¥™‡µÜ‡¥∏‡¥ø‡¥´‡¥ø‡¥ï‡µç ‡¥ì‡¥™‡µç‡¥∑‡¥®‡µÅ‡¥ï‡µæ ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï
            cmd = base_cmd + strategy['cmd_parts'] + [
                '--add-header', 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                '--add-header', 'Accept-Language: en-US,en;q=0.5',
                '-o', output_path,
                url
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0 and os.path.exists(output_path):
                # ‡¥µ‡¥ø‡¥ú‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø ‡¥∞‡µÄ‡¥§‡¥ø ‡¥ü‡µç‡¥∞‡¥æ‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
                success_stats['methods'][strategy['name']] = success_stats['methods'].get(strategy['name'], 0) + 1
                
                return {
                    'success': True,
                    'method': strategy['name'],
                    'file_path': output_path,
                    'filename': os.path.basename(output_path),
                    'file_size': os.path.getsize(output_path)
                }
        except subprocess.TimeoutExpired:
            continue
        except Exception:
            continue
    
    return {'success': False, 'error': '‡¥é‡¥≤‡µç‡¥≤‡¥æ ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç ‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥±‡µç‡¥±‡¥ú‡¥ø‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ - ‡¥∏‡¥æ‡¥ß‡µç‡¥Ø‡¥§‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥¨‡µç‡¥≤‡µã‡¥ï‡µç‡¥ï‡µç'}

# ================== API ‡¥é‡µª‡¥°‡µç‚Äå‡¥™‡µã‡¥Ø‡¥ø‡¥®‡µç‡¥±‡µÅ‡¥ï‡µæ ================== #

@app.before_request
def before_request():
    """‡¥Ø‡µÇ‡¥∏‡µº ‡¥ü‡µç‡¥∞‡¥æ‡¥ï‡µç‡¥ï‡¥ø‡¥Ç‡¥ó‡µç ‡¥â‡¥≥‡µç‡¥≥ ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥±‡µá‡¥±‡µç‡¥±‡µç ‡¥≤‡¥ø‡¥Æ‡¥ø‡¥±‡µç‡¥±‡¥ø‡¥Ç‡¥ó‡µç"""
    if request.endpoint in ['static', 'favicon']:
        return
    if not rate_limit_check():
        return jsonify({
            "error": "‡¥±‡µá‡¥±‡µç‡¥±‡µç ‡¥™‡¥∞‡¥ø‡¥ß‡¥ø ‡¥ï‡¥µ‡¥ø‡¥û‡µç‡¥û‡µÅ", 
            "retry_after": "60 ‡¥∏‡µÜ‡¥ï‡µç‡¥ï‡µª‡¥°‡µç",
            "limit": f"{MAX_REQUESTS_PER_MINUTE} ‡¥Æ‡¥ø‡¥®‡¥ø‡¥±‡µç‡¥±‡¥ø‡µΩ ‡¥Ö‡¥≠‡µç‡¥Ø‡µº‡¥§‡µç‡¥•‡¥®‡¥ï‡µæ"
        }), 429

@app.route('/download', methods=['GET'])
def download_audio():
    """‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥™‡µç‡¥∞‡¥ß‡¥æ‡¥® ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç ‡¥é‡µª‡¥°‡µç‚Äå‡¥™‡µã‡¥Ø‡¥ø‡¥®‡µç‡¥±‡µç"""
    global success_stats
    success_stats['total'] += 1
    
    url = request.args.get('url')
    if not url:
        return jsonify({"error": "URL ‡¥™‡¥æ‡¥∞‡¥æ‡¥Æ‡µÄ‡¥±‡µç‡¥±‡µº ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥Æ‡¥æ‡¥£‡µç (?url=YOUTUBE_URL)"}), 400
    
    # ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü URL ‡¥µ‡¥æ‡¥≤‡¥ø‡¥°‡µá‡¥∑‡µª
    if not any(domain in url for domain in ['youtube.com', 'youtu.be', 'm.youtube.com', 'music.youtube.com']):
        return jsonify({"error": "YouTube URLs ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Æ‡µá ‡¥™‡¥ø‡¥®‡µç‡¥§‡µÅ‡¥£‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ‡¥≥‡µç‡¥≥‡µÇ"}), 400
    
    try:
        start_time = time.time()
        
        # ‡¥µ‡µÄ‡¥°‡¥ø‡¥Ø‡µã ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥®‡µá‡¥ü‡µÅ‡¥ï (‡¥®‡µã‡µ∫-‡¥¨‡µç‡¥≤‡µã‡¥ï‡µç‡¥ï‡¥ø‡¥Ç‡¥ó‡µç)
        video_info = get_video_info_enhanced(url)
        
        # ‡¥´‡µã‡µæ‡¥¨‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡¥≥‡µÅ‡¥≥‡µç‡¥≥ ‡¥∏‡µç‡¥Æ‡¥æ‡µº‡¥ü‡µç‡¥ü‡µç ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç
        download_result = smart_download_with_fallbacks(url)
        
        if download_result['success']:
            success_stats['successful'] += 1
            download_time = round(time.time() - start_time, 2)
            
            response_data = {
                "status": "completed",
                "download_url": f"/file/{download_result['filename']}",
                "filename": download_result['filename'],
                "download_time": download_time,
                "method_used": download_result.get('method', 'unknown'),
                "file_size_mb": round(download_result.get('file_size', 0) / 1024 / 1024, 2),
                "metadata": {
                    "title": video_info.get('title', '‡¥ì‡¥°‡¥ø‡¥Ø‡µã') if video_info.get('success') else '‡¥ì‡¥°‡¥ø‡¥Ø‡µã',
                    "duration": video_info.get('duration', 0) if video_info.get('success') else 0,
                    "artist": video_info.get('uploader', '‡¥Ö‡¥ú‡µç‡¥û‡¥æ‡¥§ ‡¥Ü‡µº‡¥ü‡µç‡¥ü‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡µç') if video_info.get('success') else '‡¥Ö‡¥ú‡µç‡¥û‡¥æ‡¥§ ‡¥Ü‡µº‡¥ü‡µç‡¥ü‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡µç',
                    "thumbnail": video_info.get('thumbnail', '') if video_info.get('success') else '',
                    "video_id": video_info.get('video_id', '') if video_info.get('success') else '',
                    "view_count": video_info.get('view_count', 0) if video_info.get('success') else 0
                }
            }
            
            # ‡¥Æ‡µÜ‡¥±‡µç‡¥±‡¥æ‡¥°‡¥æ‡¥±‡µç‡¥± ‡¥∏‡µá‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
            try:
                metadata_path = f"/app/metadata/{download_result['filename']}.json"
                with open(metadata_path, 'w') as f:
                    json.dump(response_data, f, indent=2)
            except:
                pass
                
            return jsonify(response_data)
        else:
            return jsonify({
                "status": "failed",
                "error": download_result.get('error', '‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ'),
                "suggestion": "‡¥µ‡µÄ‡¥°‡¥ø‡¥Ø‡µã ‡¥ú‡¥ø‡¥Ø‡µã-‡¥¨‡µç‡¥≤‡µã‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡¥§‡µã ‡¥µ‡¥Ø‡¥∏‡µç‡¥∏‡µç ‡¥™‡¥∞‡¥ø‡¥Æ‡¥ø‡¥§‡¥ø‡¥Ø‡µÅ‡¥≥‡µç‡¥≥‡¥§‡µã ‡¥Ü‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç",
                "fallback_recommended": True
            }), 500
            
    except Exception as e:
        return jsonify({
            "status": "failed",
            "error": "‡¥∏‡µá‡¥µ‡¥®‡¥Ç ‡¥§‡¥æ‡µΩ‡¥ï‡µç‡¥ï‡¥æ‡¥≤‡¥ø‡¥ï‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤",
            "retry_after": "30 ‡¥∏‡µÜ‡¥ï‡µç‡¥ï‡µª‡¥°‡µç"
        }), 500

@app.route('/file/<filename>')
def serve_file(filename):
    """‡¥∏‡µÅ‡¥∞‡¥ï‡µç‡¥∑‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥´‡¥Ø‡µΩ ‡¥∏‡µá‡¥µ‡¥®‡¥Ç"""
    try:
        safe_name = secure_filename(filename)
        file_path = f"/app/downloads/{safe_name}"
        
        if os.path.exists(file_path):
            # ‡¥π‡µÜ‡¥°‡¥±‡µÅ‡¥ï‡µæ‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø ‡¥´‡¥Ø‡µΩ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥®‡µá‡¥ü‡µÅ‡¥ï
            file_size = os.path.getsize(file_path)
            return send_file(
                file_path, 
                as_attachment=True, 
                download_name=safe_name,
                mimetype='audio/mpeg'
            )
        
        return jsonify({"error": "‡¥´‡¥Ø‡µΩ ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥ø‡¥≤‡µç‡¥≤ ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥ï‡¥æ‡¥≤‡¥π‡¥∞‡¥£‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡¥§‡µç"}), 404
    except Exception as e:
        return jsonify({"error": "‡¥´‡¥Ø‡µΩ ‡¥∏‡µá‡¥µ‡¥® ‡¥™‡¥ø‡¥∂‡¥ï‡µç"}), 500

@app.route('/info', methods=['GET'])
def get_info():
    """‡¥Æ‡µæ‡¥ü‡µç‡¥ü‡¥ø‡¥™‡µç‡¥™‡¥ø‡µæ ‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥±‡µç‡¥±‡¥ú‡¥ø‡¥ï‡¥≥‡µÅ‡¥≥‡µç‡¥≥ ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥µ‡¥ø‡¥µ‡¥∞ ‡¥é‡µª‡¥°‡µç‚Äå‡¥™‡µã‡¥Ø‡¥ø‡¥®‡µç‡¥±‡µç"""
    url = request.args.get('url')
    if not url:
        return jsonify({"error": "URL ‡¥™‡¥æ‡¥∞‡¥æ‡¥Æ‡µÄ‡¥±‡µç‡¥±‡µº ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥Æ‡¥æ‡¥£‡µç (?url=YOUTUBE_URL)"}), 400
    
    info = get_video_info_enhanced(url)
    if info.get('success'):
        return jsonify({"status": "success", "data": info})
    else:
        return jsonify({
            "status": "failed", 
            "error": info.get('error', '‡¥µ‡µÄ‡¥°‡¥ø‡¥Ø‡µã ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥®‡µá‡¥ü‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡¥ø‡¥≤‡µç‡¥≤'),
            "suggestion": "‡¥µ‡µÄ‡¥°‡¥ø‡¥Ø‡µã ‡¥∏‡µç‡¥µ‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥Æ‡µã ‡¥á‡¥≤‡µç‡¥≤‡¥æ‡¥§‡¥æ‡¥ï‡µç‡¥ï‡¥ø‡¥Ø‡¥§‡µã ‡¥ú‡¥ø‡¥Ø‡µã-‡¥¨‡µç‡¥≤‡µã‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡¥§‡µã ‡¥Ü‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç"
        }), 500

@app.route('/stats')
def get_stats():
    """‡¥∏‡¥Æ‡¥ó‡µç‡¥∞‡¥Æ‡¥æ‡¥Ø API ‡¥∏‡µç‡¥•‡¥ø‡¥§‡¥ø‡¥µ‡¥ø‡¥µ‡¥∞‡¥ï‡µç‡¥ï‡¥£‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡µæ"""
    try:
        total = success_stats['total']
        successful = success_stats['successful']
        success_rate = (successful / total * 100) if total > 0 else 0
        
        # ‡¥Æ‡¥ø‡¥ï‡¥ö‡µç‡¥ö ‡¥™‡µç‡¥∞‡¥ï‡¥ü‡¥®‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥∞‡µÄ‡¥§‡¥ø‡¥ï‡µæ
        methods = success_stats['methods']
        top_method = max(methods, key=methods.get) if methods else 'none'
        
        return jsonify({
            "performance": {
                "total_requests": total,
                "successful_downloads": successful,
                "success_rate": f"{success_rate:.1f}%",
                "api_health": "‡¥Æ‡¥ø‡¥ï‡¥ö‡µç‡¥ö‡¥§‡µç" if success_rate > 80 else "‡¥®‡¥≤‡µç‡¥≤‡¥§‡µç" if success_rate > 60 else "‡¥Æ‡µã‡¥∂‡¥Ç"
            },
            "methods": {
                "most_successful": top_method,
                "breakdown": methods
            },
            "system": {
                "active_files": len(glob.glob('/app/downloads/*')),
                "uptime": "‡¥§‡µÅ‡¥ü‡µº‡¥ö‡µç‡¥ö‡¥Ø‡¥æ‡¥Ø",
                "auto_cleanup": "‡¥ì‡¥∞‡µã 30 ‡¥Æ‡¥ø‡¥®‡¥ø‡¥±‡µç‡¥±‡¥ø‡¥≤‡µÅ‡¥Ç"
            },
            "timestamp": time.time()
        })
    except:
        return jsonify({"error": "‡¥∏‡µç‡¥•‡¥ø‡¥§‡¥ø‡¥µ‡¥ø‡¥µ‡¥∞‡¥ï‡µç‡¥ï‡¥£‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡µæ ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤"}), 500

@app.route('/health')
def health_check():
    """‡¥∏‡¥Æ‡¥ó‡µç‡¥∞‡¥Æ‡¥æ‡¥Ø ‡¥Ü‡¥∞‡µã‡¥ó‡µç‡¥Ø ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥®"""
    try:
        # yt-dlp ‡¥≤‡¥≠‡µç‡¥Ø‡¥§ ‡¥™‡¥∞‡µÄ‡¥ï‡µç‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
        yt_dlp_test = subprocess.run(['yt-dlp', '--version'], capture_output=True, timeout=5)
        yt_dlp_ok = yt_dlp_test.returncode == 0
        
        # ffmpeg ‡¥≤‡¥≠‡µç‡¥Ø‡¥§ ‡¥™‡¥∞‡µÄ‡¥ï‡µç‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
        ffmpeg_test = subprocess.run(['ffmpeg', '-version'], capture_output=True, timeout=5)
        ffmpeg_ok = ffmpeg_test.returncode == 0
        
        # ‡¥°‡¥ø‡¥∏‡µç‡¥ï‡µç ‡¥∏‡µç‡¥™‡µá‡¥∏‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
        files_count = len(glob.glob('/app/downloads/*'))
        
        health_status = "‡¥Ü‡¥∞‡µã‡¥ó‡µç‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø" if (yt_dlp_ok and ffmpeg_ok) else "‡¥Ö‡¥™‡¥ó‡µç‡¥∞‡¥•‡¥ø‡¥§‡¥Ç"
        
        return jsonify({
            "status": health_status,
            "components": {
                "yt_dlp": "‡¥∂‡¥∞‡¥ø" if yt_dlp_ok else "‡¥™‡¥ø‡¥∂‡¥ï‡µç",
                "ffmpeg": "‡¥∂‡¥∞‡¥ø" if ffmpeg_ok else "‡¥™‡¥ø‡¥∂‡¥ï‡µç",
                "storage": "‡¥∂‡¥∞‡¥ø" if files_count < 100 else "‡¥Æ‡µÅ‡¥®‡µç‡¥®‡¥±‡¥ø‡¥Ø‡¥ø‡¥™‡µç‡¥™‡µç"
            },
            "metrics": {
                "active_files": files_count,
                "success_rate": f"{(success_stats['successful'] / success_stats['total'] * 100) if success_stats['total'] > 0 else 0:.1f}%"
            },
            "timestamp": time.time()
        })
    except:
        return jsonify({"status": "‡¥™‡¥ø‡¥∂‡¥ï‡µç"}), 500

@app.route('/version')
def version_info():
    """‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥™‡¥§‡¥ø‡¥™‡µç‡¥™‡µç ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ"""
    try:
        yt_dlp_result = subprocess.run(['yt-dlp', '--version'], capture_output=True, text=True)
        ffmpeg_result = subprocess.run(['ffmpeg', '-version'], capture_output=True, text=True)
        
        return jsonify({
            "api_version": "4.0.0",
            "yt_dlp_version": yt_dlp_result.stdout.strip() if yt_dlp_result.returncode == 0 else "‡¥Ö‡¥ú‡µç‡¥û‡¥æ‡¥§‡¥Ç",
            "ffmpeg_available": ffmpeg_result.returncode == 0,
            "python_version": "3.11+",
            "features": [
                "‡¥¨‡µç‡¥∞‡µó‡¥∏‡µº ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥∞‡µÇ‡¥™‡¥£‡¥Ç",
                "‡¥Æ‡µæ‡¥ü‡µç‡¥ü‡¥ø‡¥™‡µç‡¥™‡¥ø‡µæ ‡¥´‡µã‡µæ‡¥¨‡¥æ‡¥ï‡µç‡¥ï‡µç ‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥±‡µç‡¥±‡¥ú‡¥ø‡¥ï‡µæ", 
                "‡¥ì‡¥ü‡µç‡¥ü‡µã-‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥™‡µç‡¥™‡µç ‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥Ç",
                "‡¥µ‡¥ø‡¥ú‡¥Ø ‡¥®‡¥ø‡¥∞‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡µã‡¥£‡¥ø‡¥±‡µç‡¥±‡¥±‡¥ø‡¥Ç‡¥ó‡µç",
                "‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥™‡¥ø‡¥∂‡¥ï‡µç ‡¥ï‡µà‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µΩ"
            ]
        })
    except:
        return jsonify({"error": "‡¥™‡¥§‡¥ø‡¥™‡µç‡¥™‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥® ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ"}), 500

@app.route('/cleanup', methods=['POST'])
def manual_cleanup():
    """‡¥∏‡µç‡¥•‡¥ø‡¥§‡¥ø‡¥µ‡¥ø‡¥µ‡¥∞‡¥ï‡µç‡¥ï‡¥£‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡¥≥‡µÅ‡¥≥‡µç‡¥≥ ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥Æ‡¥æ‡¥®‡µÅ‡¥µ‡µΩ ‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥™‡µç‡¥™‡µç"""
    try:
        deleted_files = 0
        deleted_metadata = 0
        
        # ‡¥é‡¥≤‡µç‡¥≤‡¥æ ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥ï‡µç‡¥≤‡µÄ‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
        for file_path in glob.glob('/app/downloads/*'):
            try:
                os.remove(file_path)
                deleted_files += 1
            except:
                pass
        
        # ‡¥é‡¥≤‡µç‡¥≤‡¥æ ‡¥Æ‡µÜ‡¥±‡µç‡¥±‡¥æ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥Ø‡µÅ‡¥Ç ‡¥ï‡µç‡¥≤‡µÄ‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
        for meta_path in glob.glob('/app/metadata/*'):
            try:
                os.remove(meta_path)
                deleted_metadata += 1
            except:
                pass
        
        return jsonify({
            "message": "‡¥Æ‡¥æ‡¥®‡µÅ‡¥µ‡µΩ ‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥™‡µç‡¥™‡µç ‡¥µ‡¥ø‡¥ú‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥™‡µÇ‡µº‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥æ‡¥Ø‡¥ø",
            "deleted_files": deleted_files,
            "deleted_metadata": deleted_metadata,
            "next_auto_cleanup": "30 ‡¥Æ‡¥ø‡¥®‡¥ø‡¥±‡µç‡¥±‡µç"
        })
    except:
        return jsonify({"error": "‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥™‡µç‡¥™‡µç ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ"}), 500

@app.route('/')
def home():
    """‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü API ‡¥°‡µã‡¥ï‡µç‡¥Ø‡µÅ‡¥Æ‡µÜ‡¥®‡µç‡¥±‡µá‡¥∑‡µª"""
    success_rate = (success_stats['successful'] / success_stats['total'] * 100) if success_stats['total'] > 0 else 0
    
    return jsonify({
        "name": "üéµ YouTube ‡¥ì‡¥°‡¥ø‡¥Ø‡µã ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µº API",
        "version": "4.0.0 - ‡¥Ö‡µæ‡¥ü‡µç‡¥ü‡¥ø‡¥Æ‡µá‡¥±‡µç‡¥±‡µç ‡¥é‡¥°‡¥ø‡¥∑‡µª",
        "status": "‡¥∏‡¥ú‡µÄ‡¥µ‡¥Ç",
        "current_success_rate": f"{success_rate:.1f}%",
        "endpoints": {
            "download": {
                "url": "/download?url=YOUTUBE_URL",
                "description": "‡¥Æ‡µæ‡¥ü‡µç‡¥ü‡¥ø‡¥™‡µç‡¥™‡¥ø‡µæ ‡¥´‡µã‡µæ‡¥¨‡¥æ‡¥ï‡µç‡¥ï‡µç ‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥±‡µç‡¥±‡¥ú‡¥ø‡¥ï‡¥≥‡µÅ‡¥≥‡µç‡¥≥ ‡¥ì‡¥°‡¥ø‡¥Ø‡µã ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï",
                "methods": ["GET"]
            },
            "info": {
                "url": "/info?url=YOUTUBE_URL", 
                "description": "‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥§‡µÜ ‡¥µ‡µÄ‡¥°‡¥ø‡¥Ø‡µã ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥®‡µá‡¥ü‡µÅ‡¥ï",
                "methods": ["GET"]
            },
            "file_download": {
                "url": "/file/FILENAME.mp3",
                "description": "‡¥™‡µç‡¥∞‡µã‡¥∏‡¥∏‡µç‡¥∏‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§ ‡¥ì‡¥°‡¥ø‡¥Ø‡µã ‡¥´‡¥Ø‡µΩ ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï",
                "methods": ["GET"]
            },
            "statistics": {
                "url": "/stats",
                "description": "API ‡¥™‡µç‡¥∞‡¥ï‡¥ü‡¥® ‡¥∏‡µç‡¥•‡¥ø‡¥§‡¥ø‡¥µ‡¥ø‡¥µ‡¥∞‡¥ï‡µç‡¥ï‡¥£‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡µæ",
                "methods": ["GET"]
            },
            "health": {
                "url": "/health",
                "description": "‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥Ç ‡¥Ü‡¥∞‡µã‡¥ó‡µç‡¥Ø ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥®",
                "methods": ["GET"]
            },
            "version": {
                "url": "/version", 
                "description": "‡¥ò‡¥ü‡¥ï ‡¥™‡¥§‡¥ø‡¥™‡µç‡¥™‡µç ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ",
                "methods": ["GET"]
            },
            "cleanup": {
                "url": "/cleanup",
                "description": "‡¥Æ‡¥æ‡¥®‡µÅ‡¥µ‡µΩ ‡¥´‡¥Ø‡µΩ ‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥™‡µç‡¥™‡µç",
                "methods": ["POST"]
            }
        },
        "features": [
            "üõ°Ô∏è ‡¥¨‡µç‡¥∞‡µó‡¥∏‡µº ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥∞‡µÇ‡¥™‡¥£‡¥Ç ‡¥â‡¥≥‡µç‡¥≥ ‡¥Ö‡¥°‡µç‡¥µ‡¥æ‡µª‡¥∏‡µç‡¥°‡µç ‡¥Ü‡¥®‡µç‡¥±‡¥ø-‡¥¨‡µç‡¥≤‡µã‡¥ï‡µç‡¥ï‡¥ø‡¥Ç‡¥ó‡µç",
            "üîÑ ‡¥Æ‡µæ‡¥ü‡µç‡¥ü‡¥ø‡¥™‡µç‡¥™‡¥ø‡µæ ‡¥´‡µã‡µæ‡¥¨‡¥æ‡¥ï‡µç‡¥ï‡µç ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç ‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥±‡µç‡¥±‡¥ú‡¥ø‡¥ï‡µæ",
            "üìä ‡¥±‡¥ø‡¥Ø‡µΩ-‡¥ü‡µà‡¥Ç ‡¥µ‡¥ø‡¥ú‡¥Ø ‡¥®‡¥ø‡¥∞‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡µã‡¥£‡¥ø‡¥±‡µç‡¥±‡¥±‡¥ø‡¥Ç‡¥ó‡µç",
            "üßπ ‡¥ì‡¥ü‡µç‡¥ü‡µã‡¥Æ‡¥æ‡¥±‡µç‡¥±‡¥ø‡¥ï‡µç ‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥™‡µç‡¥™‡µç ‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥Ç",
            "‚ö° ‡¥â‡¥Ø‡µº‡¥®‡µç‡¥® ‡¥®‡¥ø‡¥≤‡¥µ‡¥æ‡¥∞‡¥Æ‡µÅ‡¥≥‡µç‡¥≥ MP3 ‡¥ì‡¥°‡¥ø‡¥Ø‡µã ‡¥é‡¥ï‡µç‚Äå‡¥∏‡µç‡¥ü‡µç‡¥∞‡¥æ‡¥ï‡µç‡¥∑‡µª",
            "üì± WhatsApp/Telegram ‡¥¨‡µã‡¥ü‡µç‡¥ü‡µç ‡¥§‡¥Ø‡µç‡¥Ø‡¥æ‡¥±‡¥æ‡¥£‡µç",
            "üîí ‡¥±‡µá‡¥±‡µç‡¥±‡µç ‡¥≤‡¥ø‡¥Æ‡¥ø‡¥±‡µç‡¥±‡¥ø‡¥Ç‡¥ó‡µç, ‡¥∏‡µÅ‡¥∞‡¥ï‡µç‡¥∑",
            "üìà ‡¥™‡µç‡¥∞‡¥ï‡¥ü‡¥® ‡¥Ö‡¥®‡¥≤‡¥ø‡¥±‡µç‡¥±‡¥ø‡¥ï‡µç‡¥∏‡µç"
        ],
        "limits": {
            "requests_per_minute": MAX_REQUESTS_PER_MINUTE,
            "file_retention": "2 ‡¥Æ‡¥£‡¥ø‡¥ï‡µç‡¥ï‡µÇ‡µº",
            "max_file_size": "50MB",
            "supported_formats": ["MP3"]
        },
        "disclaimer": "‡¥µ‡¥ø‡¥¶‡µç‡¥Ø‡¥æ‡¥≠‡µç‡¥Ø‡¥æ‡¥∏ ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç. YouTube-‡¥®‡µç‡¥±‡µÜ ‡¥∏‡µá‡¥µ‡¥® ‡¥®‡¥ø‡¥¨‡¥®‡µç‡¥ß‡¥®‡¥ï‡µæ ‡¥¨‡¥π‡µÅ‡¥Æ‡¥æ‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
    })

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "‡¥é‡µª‡¥°‡µç‚Äå‡¥™‡µã‡¥Ø‡¥ø‡¥®‡µç‡¥±‡µç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥ø‡¥≤‡µç‡¥≤", "available_endpoints": "/"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "‡¥Ü‡¥®‡µç‡¥§‡¥∞‡¥ø‡¥ï ‡¥∏‡µÜ‡µº‡¥µ‡µº ‡¥™‡¥ø‡¥∂‡¥ï‡µç", "suggestion": "‡¥™‡¥ø‡¥®‡µç‡¥®‡µÄ‡¥ü‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï"}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8000))
    print(f"üöÄ YouTube ‡¥ì‡¥°‡¥ø‡¥Ø‡µã API v4.0 ‡¥™‡µã‡µº‡¥ü‡µç‡¥ü‡µç {port}-‡µΩ ‡¥Ü‡¥∞‡¥Ç‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ")
    print(f"üõ°Ô∏è ‡¥Ö‡¥°‡µç‡¥µ‡¥æ‡µª‡¥∏‡µç‡¥°‡µç ‡¥Ü‡¥®‡µç‡¥±‡¥ø-‡¥¨‡µç‡¥≤‡µã‡¥ï‡µç‡¥ï‡¥ø‡¥Ç‡¥ó‡µç ‡¥™‡µç‡¥∞‡¥µ‡µº‡¥§‡µç‡¥§‡¥®‡¥ï‡µç‡¥∑‡¥Æ‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡¥ø")
    print(f"üìä ‡¥µ‡¥ø‡¥ú‡¥Ø ‡¥®‡¥ø‡¥∞‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡µã‡¥£‡¥ø‡¥±‡µç‡¥±‡¥±‡¥ø‡¥Ç‡¥ó‡µç ‡¥∏‡¥ú‡µÄ‡¥µ‡¥Ç")
    app.run(host='0.0.0.0', port=port, debug=False)
